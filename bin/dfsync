#!/usr/bin/env bash

REPO=$HOME/.dotfiles
DEST=$HOME
BAKFILES=$HOME/.dotfiles_bak
IGNORE_ARY=( $(cat "$REPO/.dfignore") )
DRYRUN=0

# elegant way to check membership
function containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function symlink() {
    cd "$REPO"

    echo "symlinking..."

    shopt -s dotglob    # expand .files

    for file in *; do
        SYMLNK="$DEST/$file"

        # check if ignored
        if (containsElement "$file" "${IGNORE_ARY[@]}")
        then
            echo "$file is ignored"
            continue
        fi

        if [[ -h "$SYMLNK" && `readlink "$SYMLNK"` == "$REPO/$file" ]]; then
            echo "$file already symlinked"
            continue
        fi

        if [[ -e "$SYMLNK" ]]; then
            echo "$file exists!"
            read -p "Backup $file to $BAKFILES? [y/N]: " answer
            [[ $answer =~ [Nn] ]] && continue

            # only create backup dir if needed
            if [[ ! -d $BAKFILES ]]; then
                echo "creating dir $BAKFILES"
                [[ $DRYRUN -eq 0 ]] && mkdir $BAKFILES
            fi

            echo "moving $file to $BAKFILES"
            [[ $DRYRUN -eq 0 ]] && mv $file "$BAKFILES/"
        fi

        [[ $DRYRUN -eq 0 ]] && ln -s "$REPO/$file" "$SYMLNK"
        echo "symlinked $file"
    done

    shopt -u dotglob
    cd "$OLDPWD"
}

function usage() {
    cat <<EOM
      Usage: dfsync [options]

      Options:
        -h      display this message
        -n      dry run (no actual changes performed)
EOM
}

while getopts "hn" opt; do
    case $opt in
        h) usage ;;
        n) DRYRUN=1 symlink ;;
        *) break
    esac
done
